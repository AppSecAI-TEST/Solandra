/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package lucandra.serializers.thrift;

import java.util.*;

import org.apache.commons.lang.builder.HashCodeBuilder;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.ListMetaData;
import org.apache.thrift.meta_data.StructMetaData;
import org.apache.thrift.protocol.*;

public class DocumentMetadata implements TBase<DocumentMetadata, DocumentMetadata._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("DocumentMetadata");

  private static final TField TERMS_FIELD_DESC = new TField("terms", TType.LIST, (short)1);

  public List<ThriftTerm> terms;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TERMS((short)1, "terms");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TERMS
          return TERMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TERMS, new FieldMetaData("terms", TFieldRequirementType.REQUIRED, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, ThriftTerm.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(DocumentMetadata.class, metaDataMap);
  }

  public DocumentMetadata() {
  }

  public DocumentMetadata(
    List<ThriftTerm> terms)
  {
    this();
    this.terms = terms;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DocumentMetadata(DocumentMetadata other) {
    if (other.isSetTerms()) {
      List<ThriftTerm> __this__terms = new ArrayList<ThriftTerm>();
      for (ThriftTerm other_element : other.terms) {
        __this__terms.add(new ThriftTerm(other_element));
      }
      this.terms = __this__terms;
    }
  }

  public DocumentMetadata deepCopy() {
    return new DocumentMetadata(this);
  }

  @Override
  public void clear() {
    this.terms = null;
  }

  public int getTermsSize() {
    return (this.terms == null) ? 0 : this.terms.size();
  }

  public java.util.Iterator<ThriftTerm> getTermsIterator() {
    return (this.terms == null) ? null : this.terms.iterator();
  }

  public void addToTerms(ThriftTerm elem) {
    if (this.terms == null) {
      this.terms = new ArrayList<ThriftTerm>();
    }
    this.terms.add(elem);
  }

  public List<ThriftTerm> getTerms() {
    return this.terms;
  }

  public DocumentMetadata setTerms(List<ThriftTerm> terms) {
    this.terms = terms;
    return this;
  }

  public void unsetTerms() {
    this.terms = null;
  }

  /** Returns true if field terms is set (has been asigned a value) and false otherwise */
  public boolean isSetTerms() {
    return this.terms != null;
  }

  public void setTermsIsSet(boolean value) {
    if (!value) {
      this.terms = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TERMS:
      if (value == null) {
        unsetTerms();
      } else {
        setTerms((List<ThriftTerm>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TERMS:
      return getTerms();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TERMS:
      return isSetTerms();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DocumentMetadata)
      return this.equals((DocumentMetadata)that);
    return false;
  }

  public boolean equals(DocumentMetadata that) {
    if (that == null)
      return false;

    boolean this_present_terms = true && this.isSetTerms();
    boolean that_present_terms = true && that.isSetTerms();
    if (this_present_terms || that_present_terms) {
      if (!(this_present_terms && that_present_terms))
        return false;
      if (!this.terms.equals(that.terms))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_terms = true && (isSetTerms());
    builder.append(present_terms);
    if (present_terms)
      builder.append(terms);

    return builder.toHashCode();
  }

  public int compareTo(DocumentMetadata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DocumentMetadata typedOther = (DocumentMetadata)other;

    lastComparison = Boolean.valueOf(isSetTerms()).compareTo(typedOther.isSetTerms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerms()) {
      lastComparison = TBaseHelper.compareTo(this.terms, typedOther.terms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TERMS
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.terms = new ArrayList<ThriftTerm>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                ThriftTerm _elem2;
                _elem2 = new ThriftTerm();
                _elem2.read(iprot);
                this.terms.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.terms != null) {
      oprot.writeFieldBegin(TERMS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.terms.size()));
        for (ThriftTerm _iter3 : this.terms)
        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DocumentMetadata(");
    boolean first = true;

    sb.append("terms:");
    if (this.terms == null) {
      sb.append("null");
    } else {
      sb.append(this.terms);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (terms == null) {
      throw new TProtocolException("Required field 'terms' was not present! Struct: " + toString());
    }
  }

}

