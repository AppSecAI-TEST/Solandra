<!--
 ~ Copyright 2009 T Jake Luciani
 ~
 ~ Licensed to the Apache Software Foundation (ASF) under one
 ~ or more contributor license agreements.  See the NOTICE file
 ~ distributed with this work for additional information
 ~ regarding copyright ownership.  The ASF licenses this file
 ~ to you under the Apache License, Version 2.0 (the
 ~ "License"); you may not use this file except in compliance
 ~ with the License.  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing,
 ~ software distributed under the License is distributed on an
 ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~ KIND, either express or implied.  See the License for the
 ~ specific language governing permissions and limitations
 ~ under the License.
 -->
<project name="lucandra" default="lucandra.jar" basedir="."
         xmlns:ivy="antlib:org.apache.ivy.ant">

        <description>Lucandra</description>

        <property name="src"           location="src" />
        <property name="test"          location="test" />
        <property name="config"        location="config" />
        <property name="build"         location="build" />
        <property name="build.classes" location="${build}/classes"/>
        <property name="build.test.classes" location="${build}/test-classes"/>
        <property name="lib"           location="lib" />
        <property name="cassandra.lib" location="../apache-cassandra-0.7.0-beta2/lib"/>
        <property name="cassandra.host" value="127.0.0.1"/>
        <property name="cassandra.port" value="9160"/>
        <property name="cassandra.framed" value="false"/>

        <property name="solr.app"       location="solr-app"/>
        <property name="solr.resources" location="solr-resources"/>

        <!-- ivy properties -->
        <property name="ivy.version" value="2.1.0" />
        <property name="ivy.dir" location="${build}/ivy" />
        <property name="ivy.jar" location="${ivy.dir}/ivy-${ivy.version}.jar"/>
        <property name="ivy.lib.dir" location="${lib}" />
        <property name="ivy_repo_url" value="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"/>
        <property name="ivysettings.xml" location="${ivy.dir}/ivysettings.xml" />

        <target name="init">
          <tstamp />
          <mkdir dir="${build}" />
          <mkdir dir="${build}/output" />
          <mkdir dir="${build.classes}" />
          <mkdir dir="${build.test.classes}"/>
          <mkdir dir="${ivy.dir}" />
          <mkdir dir="${ivy.lib.dir}" />
          <mkdir dir="${solr.app}" />
          <!--
              Allow Ivy to be disabled with "-Dnoivy=".
              It is kind of a hack to pretend that we already found it,
              but Ant doesn't provide an easy way of blocking dependencies
              from executing or checking multiple conditions.
            -->
          <condition property="ivy.found"><isset property="noivy" /></condition>
          <condition property="offline"><isset property="noivy" /></condition>
        </target>


        <target name="ivy-download"  description="To download ivy" unless="offline">
          <get src="${ivy_repo_url}" dest="${ivy.jar}" usetimestamp="true"/>
        </target>

        <target name="ivy-probe-antlib">
          <condition property="ivy.found">
            <typefound uri="antlib:org.apache.ivy.ant" name="cleancache"/>
          </condition>
        </target>

        <target name="ivy-init-antlib" depends="ivy-download,ivy-probe-antlib" unless="ivy.found">
          <typedef uri="antlib:org.apache.ivy.ant" onerror="fail"
                   loaderRef="ivyLoader">
            <classpath>
              <pathelement location="${ivy.jar}"/>
            </classpath>
          </typedef>
          <fail>
            <condition >
              <not>
                <typefound uri="antlib:org.apache.ivy.ant" name="cleancache"/>
              </not>
            </condition>
            You need Apache Ivy 2.0 or later from http://ant.apache.org/
            It could not be loaded from ${ivy_repo_url}
          </fail>
        </target>

        <target name="resolve" depends="ivy-init-antlib" description="retrieve dependencies with ivy" unless="noivy">
          <ivy:retrieve />
        </target>


        <path id="autoivy.classpath">
          <fileset dir="${ivy.lib.dir}">
            <include name="**/*.jar" />
          </fileset>
        </path>

        <!-- ===========================  -->

        <path id="lucandra.classpath">
          <pathelement location="${build.classes}"/>
          <pathelement location="${build.test.classes}"/>
          <pathelement location="${config}"/>
          <fileset dir="${lib}">
            <include name="**/*.jar" />
          </fileset>
          <fileset dir="${cassandra.lib}">
            <include name="**/*.jar" />
          </fileset>
          <path refid="autoivy.classpath" />
        </path>


        <target name="compile" depends="init,resolve">
          <javac debug="true" destdir="${build.classes}">
            <src path="${src}"/>
            <classpath refid="lucandra.classpath"/>
          </javac>
        </target>

        <target name="compile.tests" depends="compile">
          <javac debug="true" destdir="${build.test.classes}">
            <src path="${test}"/>
            <classpath refid="lucandra.classpath"/>
          </javac>
        </target>


        <target name="test" depends="compile.tests">
          <echo message="running tests"/>
          <mkdir dir="${build}/output"/>
          <junit fork="on" failureproperty="testfailed">
            <classpath refid="lucandra.classpath"/>
            <formatter type="xml" usefile="true"/>
            <formatter type="brief" usefile="false"/>

            <batchtest todir="${build}/output">
              <fileset dir="${build.test.classes}" includes="**/SolandraTest*" />
            </batchtest>
            <jvmarg value="-Dsolr.solr.home=solr-example/solr"/>
            <jvmarg value="-Xmx1G"/>
          </junit>
          <fail if="testfailed" message="Some test(s) failed."/>
        </target>

        <target name="lucandra.jar" depends="compile,compile.tests">
          <jar jarfile="lucandra.jar" basedir="${build.classes}" />
          <jar jarfile="lucandra-tests.jar" basedir="${build.test.classes}" />
        </target>

        <target name="demo" depends="compile.tests">
          <java classname="lucandra.demo.BookmarksDemo">
            <classpath refid="lucandra.classpath"/>
          </java>
        </target>

        <target name="clean">
          <delete dir="${build}" />
          <delete dir="${solr.app}" />
          <delete file="lucandra.jar" />
          <delete file="lucandra-tests.jar" />
        </target>

        <!-- ============================= -->
        <target name="war" depends="lucandra.jar">
          <war destfile="solr.war"
               webxml="${solr.resources}/web.xml">
            <lib dir="${lib}">
              <exclude name="jetty*.jar" />
              <exclude name="servlet-api*.jar" />
              <exclude name="easymock.jar" />
            </lib>
            <lib dir="${cassandra.lib}">
              <include name="**/*.jar" />
            </lib>
            <lib file="lucandra.jar"/>
          </war>
        </target>
        <target name="dist" depends="war">
          <delete dir="${solr.app}" />
          <mkdir dir="${solr.app}"/>
          <mkdir dir="${solr.app}/logs" />
          <mkdir dir="${solr.app}/etc" />
          <mkdir dir="${solr.app}/lib" />
          <copy todir="${solr.app}/lib">
            <fileset dir="lib" includes="jetty*.jar,servlet*.jar"/>
          </copy>
          <copy todir="${solr.app}/etc">
            <fileset dir="${solr.resources}" includes="jetty.xml,webdefault.xml"/>
          </copy>
          <copy file="solr.war" tofile="${solr.app}/webapps/solr.war"/>
          <copy todir="${solr.app}/solr/conf" overwrite="false">
            <fileset dir="${solr.resources}" includes="solrconfig.xml,schema.xml"/>
          </copy>
          <chmod dir="${solr.app}/solr/conf" perm="644" includes="**,*"/>
          <copy file="${solr.resources}/run_server.sh" tofile="${solr.app}/run_server.sh"/>
          <chmod dir="${solr.app}" perm="755" includes="run_server.sh"/>
          <copy file="${solr.resources}/start.jar" tofile="${solr.app}/start.jar"/>
          <copy file="${solr.resources}/cassandra.yaml" tofile="${solr.app}/cassandra.yaml"/>
          <echo>Solr successfully builded.</echo>
          <echo>You can excute the following command to start the server:Solr successfully builded.</echo>
          <echo>cd ${solr.app}; java -Xmx1G -jar start.jar</echo>
        </target>
</project>
